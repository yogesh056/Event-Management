{"ast":null,"code":"var _jsxFileName = \"/Users/yogeshwaranramesh/College/Event-Management/client/src/components/Login/Login.jsx\";\nimport React from 'react';\nimport 'antd/dist/antd.css';\nimport { Drawer, Form, Input, Tooltip, Icon, Cascader, Select, Row, Col, Checkbox, Button, AutoComplete } from 'antd';\nconst Option = Select.Option;\nconst AutoCompleteOption = AutoComplete.Option;\n\nclass Login extends React.Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      confirmDirty: false,\n      autoCompleteResult: []\n    };\n\n    this.handleSubmit = e => {\n      e.preventDefault();\n      this.props.form.validateFieldsAndScroll((err, values) => {\n        if (!err) {\n          console.log('Received values of form: ', values);\n        }\n      });\n    };\n\n    this.handleConfirmBlur = e => {\n      const value = e.target.value;\n      this.setState({\n        confirmDirty: this.state.confirmDirty || !!value\n      });\n    };\n\n    this.compareToFirstPassword = (rule, value, callback) => {\n      const form = this.props.form;\n\n      if (value && value !== form.getFieldValue('password')) {\n        callback('Two passwords that you enter is inconsistent!');\n      } else {\n        callback();\n      }\n    };\n\n    this.validateToNextPassword = (rule, value, callback) => {\n      const form = this.props.form;\n\n      if (value && this.state.confirmDirty) {\n        form.validateFields(['confirm'], {\n          force: true\n        });\n      }\n\n      callback();\n    };\n\n    this.handleWebsiteChange = value => {\n      let autoCompleteResult;\n\n      if (!value) {\n        autoCompleteResult = [];\n      } else {\n        autoCompleteResult = ['.com', '.org', '.net'].map(domain => `${value}${domain}`);\n      }\n\n      this.setState({\n        autoCompleteResult\n      });\n    };\n  }\n\n  render() {\n    const visible = this.props.visible;\n    const getFieldDecorator = this.props.form.getFieldDecorator;\n    const autoCompleteResult = this.state.autoCompleteResult;\n    return React.createElement(Drawer, {\n      title: \"Create a new account\",\n      width: 720,\n      onClose: this.props.onClose,\n      visible: visible,\n      bodyStyle: {\n        paddingBottom: 80\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 75\n      },\n      __self: this\n    }, React.createElement(Form, {\n      onSubmit: this.handleSubmit,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 82\n      },\n      __self: this\n    }, React.createElement(Form.Item, {\n      label: \"E-mail\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 83\n      },\n      __self: this\n    }, getFieldDecorator('email', {\n      rules: [{\n        type: 'email',\n        message: 'The input is not valid E-mail!'\n      }, {\n        required: true,\n        message: 'Please input your E-mail!'\n      }]\n    })(React.createElement(Input, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 95\n      },\n      __self: this\n    }))), React.createElement(Form.Item, {\n      label: \"Password\",\n      hasFeedback: true,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 97\n      },\n      __self: this\n    }, getFieldDecorator('password', {\n      rules: [{\n        required: true,\n        message: 'Please input your password!'\n      }, {\n        validator: this.validateToNextPassword\n      }]\n    })(React.createElement(Input.Password, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 108\n      },\n      __self: this\n    }))), React.createElement(Form.Item, {\n      label: \"Confirm Password\",\n      hasFeedback: true,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 110\n      },\n      __self: this\n    }, getFieldDecorator('confirm', {\n      rules: [{\n        required: true,\n        message: 'Please confirm your password!'\n      }, {\n        validator: this.compareToFirstPassword\n      }]\n    })(React.createElement(Input.Password, {\n      onBlur: this.handleConfirmBlur,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 121\n      },\n      __self: this\n    }))), React.createElement(Form.Item, {\n      label: React.createElement(\"span\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 125\n        },\n        __self: this\n      }, \"Nickname\\xA0\", React.createElement(Tooltip, {\n        title: \"What do you want others to call you?\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 127\n        },\n        __self: this\n      }, React.createElement(Icon, {\n        type: \"question-circle-o\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 128\n        },\n        __self: this\n      }))),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 123\n      },\n      __self: this\n    }, getFieldDecorator('nickname', {\n      rules: [{\n        required: true,\n        message: 'Please input your nickname!',\n        whitespace: true\n      }]\n    })(React.createElement(Input, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 135\n      },\n      __self: this\n    }))), React.createElement(Form.Item, {\n      label: \"Habitual Residence\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 137\n      },\n      __self: this\n    }, getFieldDecorator('residence', {\n      initialValue: ['zhejiang', 'hangzhou', 'xihu'],\n      rules: [{\n        type: 'array',\n        required: true,\n        message: 'Please select your habitual residence!'\n      }]\n    })(React.createElement(Select, {\n      placeholder: \"Please select an Type\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 143\n      },\n      __self: this\n    }, React.createElement(Option, {\n      value: \"xiao\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 144\n      },\n      __self: this\n    }), React.createElement(Option, {\n      value: \"mao\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 145\n      },\n      __self: this\n    }, \"Maomao Zhou\")))), React.createElement(Form.Item, {\n      label: \"Phone Number\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 148\n      },\n      __self: this\n    }, getFieldDecorator('phone', {\n      rules: [{\n        required: true,\n        message: 'Please input your phone number!'\n      }]\n    })(React.createElement(Input, {\n      style: {\n        width: '100%'\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 151\n      },\n      __self: this\n    }))), React.createElement(Form.Item, {\n      label: \"Website\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 153\n      },\n      __self: this\n    }, getFieldDecorator('website', {\n      rules: [{\n        required: true,\n        message: 'Please input website!'\n      }]\n    })(React.createElement(AutoComplete // dataSource={websiteOptions}\n    , {\n      onChange: this.handleWebsiteChange,\n      placeholder: \"website\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 157\n      },\n      __self: this\n    }, React.createElement(Input, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 162\n      },\n      __self: this\n    })))), getFieldDecorator('agreement', {\n      valuePropName: 'checked'\n    })(React.createElement(Checkbox, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 181\n      },\n      __self: this\n    }, \"I have read the \", React.createElement(\"a\", {\n      href: \"\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 182\n      },\n      __self: this\n    }, \"agreement\"))), React.createElement(Button, {\n      type: \"primary\",\n      htmlType: \"submit\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 185\n      },\n      __self: this\n    }, \"Register\")));\n  }\n\n}\n\nexport const WrappedLogin = Form.create({\n  name: 'register'\n})(Login);","map":{"version":3,"sources":["/Users/yogeshwaranramesh/College/Event-Management/client/src/components/Login/Login.jsx"],"names":["React","Drawer","Form","Input","Tooltip","Icon","Cascader","Select","Row","Col","Checkbox","Button","AutoComplete","Option","AutoCompleteOption","Login","Component","state","confirmDirty","autoCompleteResult","handleSubmit","e","preventDefault","props","form","validateFieldsAndScroll","err","values","console","log","handleConfirmBlur","value","target","setState","compareToFirstPassword","rule","callback","getFieldValue","validateToNextPassword","validateFields","force","handleWebsiteChange","map","domain","render","visible","getFieldDecorator","onClose","paddingBottom","rules","type","message","required","validator","whitespace","initialValue","width","valuePropName","WrappedLogin","create","name"],"mappings":"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","sourcesContent":["\nimport React from 'react';\nimport 'antd/dist/antd.css';\nimport {\n  Drawer,\n  Form,\n  Input,\n  Tooltip,\n  Icon,\n  Cascader,\n  Select,\n  Row,\n  Col,\n  Checkbox,\n  Button,\n  AutoComplete,\n} from 'antd';\n\nconst { Option } = Select;\nconst AutoCompleteOption = AutoComplete.Option;\n\nclass Login extends React.Component {\n  state = {\n    confirmDirty: false,\n    autoCompleteResult: [],\n  };\n\n\n  handleSubmit = e => {\n    e.preventDefault();\n    this.props.form.validateFieldsAndScroll((err, values) => {\n      if (!err) {\n        console.log('Received values of form: ', values);\n      }\n    });\n  };\n\n  handleConfirmBlur = e => {\n    const { value } = e.target;\n    this.setState({ confirmDirty: this.state.confirmDirty || !!value });\n  };\n\n  compareToFirstPassword = (rule, value, callback) => {\n    const { form } = this.props;\n    if (value && value !== form.getFieldValue('password')) {\n      callback('Two passwords that you enter is inconsistent!');\n    } else {\n      callback();\n    }\n  };\n\n  validateToNextPassword = (rule, value, callback) => {\n    const { form } = this.props;\n    if (value && this.state.confirmDirty) {\n      form.validateFields(['confirm'], { force: true });\n    }\n    callback();\n  };\n\n  handleWebsiteChange = value => {\n    let autoCompleteResult;\n    if (!value) {\n      autoCompleteResult = [];\n    } else {\n      autoCompleteResult = ['.com', '.org', '.net'].map(domain => `${value}${domain}`);\n    }\n    this.setState({ autoCompleteResult });\n  };\n  render() {\n    const { visible } = this.props;\n    const { getFieldDecorator } = this.props.form;\n    const { autoCompleteResult } = this.state;\n\n    return (\n        <Drawer\n          title=\"Create a new account\"\n          width={720}\n          onClose={this.props.onClose}\n          visible={visible}\n          bodyStyle={{ paddingBottom: 80 }}\n        >\n         <Form onSubmit={this.handleSubmit}>\n        <Form.Item label=\"E-mail\">\n          {getFieldDecorator('email', {\n            rules: [\n              {\n                type: 'email',\n                message: 'The input is not valid E-mail!',\n              },\n              {\n                required: true,\n                message: 'Please input your E-mail!',\n              },\n            ],\n          })(<Input />)}\n        </Form.Item>\n        <Form.Item label=\"Password\" hasFeedback>\n          {getFieldDecorator('password', {\n            rules: [\n              {\n                required: true,\n                message: 'Please input your password!',\n              },\n              {\n                validator: this.validateToNextPassword,\n              },\n            ],\n          })(<Input.Password />)}\n        </Form.Item>\n        <Form.Item label=\"Confirm Password\" hasFeedback>\n          {getFieldDecorator('confirm', {\n            rules: [\n              {\n                required: true,\n                message: 'Please confirm your password!',\n              },\n              {\n                validator: this.compareToFirstPassword,\n              },\n            ],\n          })(<Input.Password onBlur={this.handleConfirmBlur} />)}\n        </Form.Item>\n        <Form.Item\n          label={\n            <span>\n              Nickname&nbsp;\n              <Tooltip title=\"What do you want others to call you?\">\n                <Icon type=\"question-circle-o\" />\n              </Tooltip>\n            </span>\n          }\n        >\n          {getFieldDecorator('nickname', {\n            rules: [{ required: true, message: 'Please input your nickname!', whitespace: true }],\n          })(<Input />)}\n        </Form.Item>\n        <Form.Item label=\"Habitual Residence\">\n          {getFieldDecorator('residence', {\n            initialValue: ['zhejiang', 'hangzhou', 'xihu'],\n            rules: [\n              { type: 'array', required: true, message: 'Please select your habitual residence!' },\n            ],\n          })(<Select placeholder=\"Please select an Type\">\n                      <Option value=\"xiao\"></Option>\n                      <Option value=\"mao\">Maomao Zhou</Option>\n                    </Select>,)}\n        </Form.Item>\n        <Form.Item label=\"Phone Number\">\n          {getFieldDecorator('phone', {\n            rules: [{ required: true, message: 'Please input your phone number!' }],\n          })(<Input  style={{ width: '100%' }} />)}\n        </Form.Item>\n        <Form.Item label=\"Website\">\n          {getFieldDecorator('website', {\n            rules: [{ required: true, message: 'Please input website!' }],\n          })(\n            <AutoComplete\n              // dataSource={websiteOptions}\n              onChange={this.handleWebsiteChange}\n              placeholder=\"website\"\n            >\n              <Input />\n            </AutoComplete>,\n          )}\n        </Form.Item>\n        {/* <Form.Item label=\"Captcha\" extra=\"We must make sure that your are a human.\">\n          <Row gutter={8}>\n            <Col span={12}>\n              {getFieldDecorator('captcha', {\n                rules: [{ required: true, message: 'Please input the captcha you got!' }],\n              })(<Input />)}\n            </Col>\n            <Col span={12}>\n              <Button>Get captcha</Button>\n            </Col>\n          </Row>\n        </Form.Item> */}\n          {getFieldDecorator('agreement', {\n            valuePropName: 'checked',\n          })(\n            <Checkbox>\n              I have read the <a href=\"\">agreement</a>\n            </Checkbox>,\n          )}\n          <Button type=\"primary\" htmlType=\"submit\">\n            Register\n          </Button>\n      </Form>\n        </Drawer>\n    );\n  }\n}\nexport const WrappedLogin = Form.create({ name: 'register' })(Login);\n          "]},"metadata":{},"sourceType":"module"}