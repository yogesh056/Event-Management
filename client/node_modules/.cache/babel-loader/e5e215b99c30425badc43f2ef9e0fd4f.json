{"ast":null,"code":"var _jsxFileName = \"/Users/yogeshwaranramesh/College/Event-Management/client/src/components/Modules/Events/Feed/SingleEventModal.jsx\";\nimport React from 'react';\nimport { Comment, Form, Button, Input, Modal } from 'antd';\nimport moment from 'moment';\nimport API from \"../../../../middleware/api\";\nimport { Skeleton, Switch, List, Avatar, Icon, Tooltip, Progress, message, Typography, Tag, Divider, Card } from 'antd';\nimport Auth from '../../../../auth/ProtectedRoute';\nconst Text = Typography.Text;\nconst Meta = Card.Meta;\nconst TextArea = Input.TextArea;\nconst userDetails = localStorage.getItem('user');\n\nconst Editor = ({\n  onChange,\n  onSubmit,\n  submitting,\n  value\n}) => React.createElement(\"div\", {\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 14\n  },\n  __self: this\n}, React.createElement(Form.Item, {\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 15\n  },\n  __self: this\n}, React.createElement(TextArea, {\n  rows: 4,\n  onChange: onChange,\n  value: value,\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 16\n  },\n  __self: this\n})), React.createElement(Form.Item, {\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 18\n  },\n  __self: this\n}, React.createElement(Button, {\n  htmlType: \"submit\",\n  loading: submitting,\n  onClick: onSubmit,\n  type: \"primary\",\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 19\n  },\n  __self: this\n}, React.createElement(Icon, {\n  type: \"message\",\n  key: \"skeleton-message\",\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 20\n  },\n  __self: this\n}), \" Add Comment\")));\n\nexport default class SingleEventModal extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.eventUpdate = async () => {\n      let eventRes = await API.post('/events/getEvent', {\n        event_id: this.props.eventDetails.id,\n        user_id: this.props.userDetail.id\n      });\n      this.setState({\n        comments: eventRes.data.comments,\n        upVote: eventRes.data.upVote,\n        downVote: eventRes.data.downVote,\n        eventLoading: false,\n        voteBool: eventRes.data.voteBool\n      }, () => {\n        console.log(\"Comments\", this.state);\n      });\n    };\n\n    this.likeFunc = async voteBool => {\n      let res = await API.post('/events/vote', {\n        event_id: this.props.eventDetails.id,\n        user_id: this.props.userDetail.id,\n        vote_bool: voteBool\n      });\n      this.eventUpdate();\n    };\n\n    this.handleSubmit = () => {\n      if (!this.state.value) {\n        return;\n      }\n\n      this.setState({\n        submitting: true\n      });\n      setTimeout(() => {\n        this.setState({\n          submitting: false,\n          value: '',\n          comments: [{\n            author: this.props.userDetail.user_name,\n            avatar: this.props.userDetail.image,\n            content: React.createElement(\"p\", {\n              __source: {\n                fileName: _jsxFileName,\n                lineNumber: 68\n              },\n              __self: this\n            }, this.state.value),\n            datetime: moment().fromNow()\n          }, ...this.state.comments]\n        });\n      }, 1000);\n    };\n\n    this.handleChange = e => {\n      this.setState({\n        value: e.target.value\n      });\n    };\n\n    console.log(\"CM\", this.props);\n    this.state = {\n      comments: [],\n      submitting: false,\n      value: ''\n    };\n  }\n\n  componentWillMount() {\n    this.eventUpdate();\n  }\n\n  render() {\n    const _this$props = this.props,\n          visible = _this$props.visible,\n          name = _this$props.name,\n          userDetail = _this$props.userDetail,\n          eventDetails = _this$props.eventDetails;\n    const _this$state = this.state,\n          comments = _this$state.comments,\n          submitting = _this$state.submitting,\n          value = _this$state.value,\n          downVote = _this$state.downVote,\n          upVote = _this$state.upVote,\n          voteBool = _this$state.voteBool;\n    return React.createElement(Modal, {\n      width: 900,\n      title: name,\n      footer: null,\n      visible: visible,\n      onCancel: this.props.handleCancel,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 86\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"event-single-wrap\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 93\n      },\n      __self: this\n    }, eventDetails && React.createElement(Card, {\n      title: React.createElement(Meta, {\n        avatar: React.createElement(Avatar, {\n          src: eventDetails.user.image,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 96\n          },\n          __self: this\n        }),\n        title: eventDetails.user.user_name,\n        description: \"a few second ago\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 95\n        },\n        __self: this\n      }),\n      style: {\n        width: \"100%\"\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 94\n      },\n      __self: this\n    }, React.createElement(Card, {\n      style: {\n        width: \"100%\"\n      },\n      className: \"main-wrap-card\",\n      cover: React.createElement(\"img\", {\n        alt: \"example\",\n        src: eventDetails.images,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 107\n        },\n        __self: this\n      }),\n      actions: [React.createElement(\"span\", {\n        key: \"comment-basic-like\",\n        style: {\n          color: voteBool === \"liked\" ? \"cornflowerblue\" : \"\"\n        },\n        onClick: this.like,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 113\n        },\n        __self: this\n      }, React.createElement(Tooltip, {\n        title: \"Like\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 114\n        },\n        __self: this\n      }, React.createElement(Icon, {\n        type: \"like-o\",\n        key: \"skeleton-star-o\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 115\n        },\n        __self: this\n      })), React.createElement(\"span\", {\n        style: {\n          paddingLeft: 8,\n          cursor: 'auto'\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 117\n        },\n        __self: this\n      }, upVote)), React.createElement(\"span\", {\n        key: \"comment-basic-like\",\n        style: {\n          color: !voteBool === \"disliked\" ? \"cornflowerblue\" : \"\"\n        },\n        onClick: this.likeFunc(fal),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 119\n        },\n        __self: this\n      }, React.createElement(Tooltip, {\n        title: \"DisLike\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 120\n        },\n        __self: this\n      }, React.createElement(Icon, {\n        type: \"dislike-o\",\n        key: \"skeleton-like-o\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 121\n        },\n        __self: this\n      })), React.createElement(\"span\", {\n        style: {\n          paddingLeft: 8,\n          cursor: 'auto'\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 123\n        },\n        __self: this\n      }, downVote)), React.createElement(\"span\", {\n        key: \"comment-basic-like\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 125\n        },\n        __self: this\n      }, React.createElement(Tooltip, {\n        title: \"Share\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 126\n        },\n        __self: this\n      }, React.createElement(Icon, {\n        type: \"share-alt\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 127\n        },\n        __self: this\n      })), React.createElement(\"span\", {\n        style: {\n          paddingLeft: 8,\n          cursor: 'auto'\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 129\n        },\n        __self: this\n      }, \"Share\"))],\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 103\n      },\n      __self: this\n    }, React.createElement(Meta // avatar={<Avatar src=\"https://zos.alipayobjects.com/rmsportal/ODTLcjxAfvqbxHnVXCYX.png\" />}\n    , {\n      title: eventDetails.name,\n      description: eventDetails.description,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 133\n      },\n      __self: this\n    }), React.createElement(Progress, {\n      percent: 30,\n      size: \"small\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 139\n      },\n      __self: this\n    }))), userDetail && React.createElement(Comment, {\n      avatar: React.createElement(Avatar, {\n        src: userDetail.image,\n        alt: userDetail.user_name,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 144\n        },\n        __self: this\n      }),\n      content: React.createElement(Editor, {\n        onChange: this.handleChange,\n        onSubmit: this.handleSubmit,\n        submitting: submitting,\n        value: value,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 150\n        },\n        __self: this\n      }),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 142\n      },\n      __self: this\n    }), comments.length > 0 && React.createElement(List, {\n      dataSource: comments,\n      header: `${comments.length} ${comments.length > 1 ? 'comments' : 'comment'}`,\n      itemLayout: \"horizontal\",\n      renderItem: item => React.createElement(Comment, {\n        author: item.user.user_name,\n        avatar: React.createElement(Avatar, {\n          src: item.user.image,\n          alt: item.user.user_name,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 166\n          },\n          __self: this\n        }),\n        content: React.createElement(\"p\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 172\n          },\n          __self: this\n        }, item.comment),\n        datetime: React.createElement(Tooltip, {\n          title: moment(item.createdAt.year).format('YYYY-MM-DD HH:mm:ss'),\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 177\n          },\n          __self: this\n        }, React.createElement(\"span\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 178\n          },\n          __self: this\n        }, moment().fromNow())),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 163\n        },\n        __self: this\n      }),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 158\n      },\n      __self: this\n    })));\n  }\n\n}","map":{"version":3,"sources":["/Users/yogeshwaranramesh/College/Event-Management/client/src/components/Modules/Events/Feed/SingleEventModal.jsx"],"names":["React","Comment","Form","Button","Input","Modal","moment","API","Skeleton","Switch","List","Avatar","Icon","Tooltip","Progress","message","Typography","Tag","Divider","Card","Auth","Text","Meta","TextArea","userDetails","localStorage","getItem","Editor","onChange","onSubmit","submitting","value","SingleEventModal","Component","constructor","props","eventUpdate","eventRes","post","event_id","eventDetails","id","user_id","userDetail","setState","comments","data","upVote","downVote","eventLoading","voteBool","console","log","state","likeFunc","res","vote_bool","handleSubmit","setTimeout","author","user_name","avatar","image","content","datetime","fromNow","handleChange","e","target","componentWillMount","render","visible","name","handleCancel","user","width","images","color","like","paddingLeft","cursor","fal","description","length","item","comment","createdAt","year","format"],"mappings":"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","sourcesContent":["import React from 'react';\nimport { Comment, Form, Button, Input, Modal } from 'antd';\nimport moment from 'moment';\nimport API from \"../../../../middleware/api\"\nimport { Skeleton, Switch, List, Avatar, Icon, Tooltip, Progress, message, Typography, Tag, Divider, Card } from 'antd';\nimport Auth from '../../../../auth/ProtectedRoute';\nconst { Text } = Typography;\nconst { Meta } = Card;\nconst { TextArea } = Input;\nconst userDetails = localStorage.getItem('user')\n\n\nconst Editor = ({ onChange, onSubmit, submitting, value }) => (\n    <div>\n        <Form.Item>\n            <TextArea rows={4} onChange={onChange} value={value} />\n        </Form.Item>\n        <Form.Item>\n            <Button htmlType=\"submit\" loading={submitting} onClick={onSubmit} type=\"primary\">\n                <Icon type=\"message\" key=\"skeleton-message\" /> Add Comment\n      </Button>\n        </Form.Item>\n    </div>\n);\nexport default class SingleEventModal extends React.Component {\n    constructor(props) {\n        super(props);\n        console.log(\"CM\", this.props)\n        this.state = {\n            comments: [],\n            submitting: false,\n            value: '',\n        };\n    }\n    componentWillMount() {\n        this.eventUpdate()\n    }\n    eventUpdate = async () => {\n        let eventRes = await API.post('/events/getEvent', { event_id: this.props.eventDetails.id,user_id:this.props.userDetail.id })\n        this.setState({ comments: eventRes.data.comments,upVote:eventRes.data.upVote,downVote:eventRes.data.downVote, eventLoading: false,voteBool:eventRes.data.voteBool}, () => {\n            console.log(\"Comments\", this.state)\n        }\n\n        )\n\n    }\n    likeFunc = async (voteBool) => {\n        let res = await API.post('/events/vote', { event_id: this.props.eventDetails.id,user_id:this.props.userDetail.id,vote_bool:voteBool })\n        this.eventUpdate()\n    }\n    handleSubmit = () => {\n        if (!this.state.value) {\n            return;\n        }\n\n        this.setState({\n            submitting: true,\n        });\n\n        setTimeout(() => {\n            this.setState({\n                submitting: false,\n                value: '',\n                comments: [\n                    {\n                        author: this.props.userDetail.user_name,\n                        avatar: this.props.userDetail.image,\n                        content: <p>{this.state.value}</p>,\n                        datetime: moment().fromNow(),\n                    },\n                    ...this.state.comments,\n                ],\n            });\n        }, 1000);\n    };\n\n    handleChange = e => {\n        this.setState({\n            value: e.target.value,\n        });\n    };\n    render() {\n        const { visible, name, userDetail, eventDetails} = this.props;\n        const { comments, submitting, value,downVote,upVote,voteBool} = this.state;\n        return (\n            <Modal\n                width={900}\n                title={name}\n                footer={null}\n                visible={visible}\n                onCancel={this.props.handleCancel}\n            >\n                <div className=\"event-single-wrap\">\n                    {eventDetails && <Card\n                        title={<Meta\n                            avatar={<Avatar src={eventDetails.user.image} />}\n                            title={eventDetails.user.user_name}\n                            description=\"a few second ago\"\n                        />}\n                        style={{ width: \"100%\" }}\n                    >\n\n                        <Card\n                            style={{ width: \"100%\" }}\n                            className=\"main-wrap-card\"\n                            cover={\n                                <img\n                                    alt=\"example\"\n                                    src={eventDetails.images}\n                                />\n                            }\n                            actions={[\n                                <span key=\"comment-basic-like\" style={{color:voteBool===\"liked\"?\"cornflowerblue\":\"\"}} onClick={this.like}>\n                                    <Tooltip title=\"Like\">\n                                        <Icon type=\"like-o\" key=\"skeleton-star-o\" />\n                                    </Tooltip>\n                                    <span style={{ paddingLeft: 8, cursor: 'auto' }}>{upVote}</span>\n                                </span>,\n                                <span key=\"comment-basic-like\" style={{color:!voteBool===\"disliked\"?\"cornflowerblue\":\"\"}} onClick={this.likeFunc(fal)}>\n                                    <Tooltip title=\"DisLike\">\n                                        <Icon type=\"dislike-o\" key=\"skeleton-like-o\" />\n                                    </Tooltip>\n                                    <span style={{ paddingLeft: 8, cursor: 'auto' }}>{downVote}</span>\n                                </span>,\n                                <span key=\"comment-basic-like\" >\n                                    <Tooltip title=\"Share\">\n                                        <Icon type=\"share-alt\"/>\n                                    </Tooltip>\n                                    <span style={{ paddingLeft: 8, cursor: 'auto' }}>{\"Share\"}</span>\n                                </span>,\n                            ]}\n                        >\n                            <Meta\n                                // avatar={<Avatar src=\"https://zos.alipayobjects.com/rmsportal/ODTLcjxAfvqbxHnVXCYX.png\" />}\n                                title={eventDetails.name}\n                                description={eventDetails.description}\n                            />\n\n                            <Progress percent={30} size=\"small\" />\n                        </Card>\n                    </Card>}\n                    {userDetail &&<Comment\n                        avatar={\n                            <Avatar\n                                src={userDetail.image}\n                                alt={userDetail.user_name}\n                            />\n                        }\n                        content={\n                            <Editor\n                                onChange={this.handleChange}\n                                onSubmit={this.handleSubmit}\n                                submitting={submitting}\n                                value={value}\n                            />\n                        }\n                    />}\n                    {comments.length > 0 && <List\n                        dataSource={comments}\n                        header={`${comments.length} ${comments.length > 1 ? 'comments' : 'comment'}`}\n                        itemLayout=\"horizontal\"\n                        renderItem={item =>\n                            <Comment\n                                author={item.user.user_name}\n                                avatar={\n                                    <Avatar\n                                        src={item.user.image}\n                                        alt={item.user.user_name}\n                                    />\n                                }\n                                content={\n                                    <p>\n                                        {item.comment}\n                                    </p>\n                                }\n                                datetime={\n                                    <Tooltip title={moment((item.createdAt).year).format('YYYY-MM-DD HH:mm:ss')}>\n                                        <span>{moment().fromNow()}</span>\n                                    </Tooltip>\n                                }\n                            />}\n                    />\n                    }\n                </div>\n            </Modal>\n        );\n    }\n}"]},"metadata":{},"sourceType":"module"}