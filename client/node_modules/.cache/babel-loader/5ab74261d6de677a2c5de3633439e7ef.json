{"ast":null,"code":"var _jsxFileName = \"/Users/yogeshwaranramesh/College/Event-Management/client/src/components/Modules/Events/Feed/CommentModal.jsx\";\nimport React from 'react';\nimport { Comment, Avatar, Form, Button, List, Input, Modal, Icon, message } from 'antd';\nimport moment from 'moment';\nimport API from \"../../../../middleware/api\";\nconst TextArea = Input.TextArea;\nconst userDetails = localStorage.getItem('user');\n\nconst Editor = ({\n  onChange,\n  onSubmit,\n  submitting,\n  value\n}) => React.createElement(\"div\", {\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 10\n  },\n  __self: this\n}, React.createElement(Form.Item, {\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 11\n  },\n  __self: this\n}, React.createElement(TextArea, {\n  rows: 4,\n  onChange: onChange,\n  value: value,\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 12\n  },\n  __self: this\n})), React.createElement(Form.Item, {\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 14\n  },\n  __self: this\n}, React.createElement(Button, {\n  htmlType: \"submit\",\n  loading: submitting,\n  onClick: onSubmit,\n  type: \"primary\",\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 15\n  },\n  __self: this\n}, React.createElement(Icon, {\n  type: \"message\",\n  key: \"skeleton-message\",\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 16\n  },\n  __self: this\n}), \" Add Comment\")));\n\nexport default class CommentModal extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.getComments = async () => {\n      let response = await API.post('/events/getComments', {\n        event_id: this.props.event.id\n      }); // response.data.code === 200 ? message.success(response.data.msg, 4) : message.error(response.data.msg, 4);    \n\n      this.setTimeout({});\n      this.setState({\n        comments: response.data.response,\n        eventLoading: false\n      });\n    };\n\n    this.handleSubmit = () => {\n      if (!this.state.value) {\n        return;\n      }\n\n      this.setState({\n        submitting: true\n      });\n      setTimeout(() => {\n        this.setState({\n          submitting: false,\n          value: '',\n          comments: [{\n            author: this.props.userDetail.user_name,\n            avatar: this.props.userDetail.image,\n            content: React.createElement(\"p\", {\n              __source: {\n                fileName: _jsxFileName,\n                lineNumber: 60\n              },\n              __self: this\n            }, this.state.value),\n            datetime: moment().fromNow()\n          }, ...this.state.comments]\n        });\n      }, 1000);\n    };\n\n    this.handleChange = e => {\n      this.setState({\n        value: e.target.value\n      });\n    };\n\n    console.log(\"CM\", this.props);\n    this.state = {\n      comments: [],\n      submitting: false,\n      value: ''\n    };\n  }\n\n  componentWillMount() {\n    this.getComments();\n  }\n\n  render() {\n    const _this$props = this.props,\n          visible = _this$props.visible,\n          confirmLoading = _this$props.confirmLoading,\n          name = _this$props.name,\n          userDetail = _this$props.userDetail;\n    const _this$state = this.state,\n          comments = _this$state.comments,\n          submitting = _this$state.submitting,\n          value = _this$state.value;\n    return React.createElement(Modal, {\n      width: 900,\n      title: name,\n      visible: visible,\n      onOk: this.props.handleOk,\n      confirmLoading: confirmLoading,\n      onCancel: this.props.handleCancel,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 78\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 86\n      },\n      __self: this\n    }, React.createElement(Comment, {\n      avatar: React.createElement(Avatar, {\n        src: userDetail.image,\n        alt: userDetail.user_name,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 89\n        },\n        __self: this\n      }),\n      content: React.createElement(Editor, {\n        onChange: this.handleChange,\n        onSubmit: this.handleSubmit,\n        submitting: submitting,\n        value: value,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 95\n        },\n        __self: this\n      }),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 87\n      },\n      __self: this\n    }), comments.length > 0 && React.createElement(Comment, {\n      actions: actions,\n      author: React.createElement(\"a\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 105\n        },\n        __self: this\n      }, \"Han Solo\"),\n      avatar: React.createElement(Avatar, {\n        src: \"https://zos.alipayobjects.com/rmsportal/ODTLcjxAfvqbxHnVXCYX.png\",\n        alt: \"Han Solo\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 107\n        },\n        __self: this\n      }),\n      content: React.createElement(\"p\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 113\n        },\n        __self: this\n      }, \"We supply a series of design principles, practical patterns and high quality design resources (Sketch and Axure), to help people create their product prototypes beautifully and efficiently.\"),\n      datetime: React.createElement(Tooltip, {\n        title: moment().format('YYYY-MM-DD HH:mm:ss'),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 120\n        },\n        __self: this\n      }, React.createElement(\"span\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 121\n        },\n        __self: this\n      }, moment().fromNow())),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 103\n      },\n      __self: this\n    })));\n  }\n\n}","map":{"version":3,"sources":["/Users/yogeshwaranramesh/College/Event-Management/client/src/components/Modules/Events/Feed/CommentModal.jsx"],"names":["React","Comment","Avatar","Form","Button","List","Input","Modal","Icon","message","moment","API","TextArea","userDetails","localStorage","getItem","Editor","onChange","onSubmit","submitting","value","CommentModal","Component","constructor","props","getComments","response","post","event_id","event","id","setTimeout","setState","comments","data","eventLoading","handleSubmit","state","author","userDetail","user_name","avatar","image","content","datetime","fromNow","handleChange","e","target","console","log","componentWillMount","render","visible","confirmLoading","name","handleOk","handleCancel","length","actions","format"],"mappings":"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","sourcesContent":["import React from 'react';\nimport { Comment, Avatar, Form, Button, List, Input, Modal,Icon ,message} from 'antd';\nimport moment from 'moment';\nimport API from \"../../../../middleware/api\"\nconst { TextArea } = Input;\nconst userDetails=localStorage.getItem('user')\n\n\nconst Editor = ({ onChange, onSubmit, submitting, value }) => (\n    <div>\n        <Form.Item>\n            <TextArea rows={4} onChange={onChange} value={value} />\n        </Form.Item>\n        <Form.Item>\n            <Button htmlType=\"submit\" loading={submitting} onClick={onSubmit} type=\"primary\">\n            <Icon type=\"message\" key=\"skeleton-message\" /> Add Comment\n      </Button>\n        </Form.Item>\n    </div>\n);\nexport default class CommentModal extends React.Component {\n    constructor(props) {\n        super(props);\n        console.log(\"CM\", this.props)\n        this.state = {\n            comments: [],\n            submitting: false,\n            value: '',\n        };\n    }\n    componentWillMount() {\n        this.getComments()\n      }\n      getComments = async () => {\n        let response = await API.post('/events/getComments',{event_id:this.props.event.id})\n        // response.data.code === 200 ? message.success(response.data.msg, 4) : message.error(response.data.msg, 4);    \n        this.setTimeout({\n\n        })\n        this.setState({ comments: response.data.response, eventLoading: false })\n    \n      }\n    handleSubmit = () => {\n        if (!this.state.value) {\n          return;\n        }\n    \n        this.setState({\n          submitting: true,\n        });\n    \n        setTimeout(() => {\n          this.setState({\n            submitting: false,\n            value: '',\n            comments: [\n              {\n                author:  this.props.userDetail.user_name,\n                avatar: this.props.userDetail.image,\n                content: <p>{this.state.value}</p>,\n                datetime: moment().fromNow(),\n              },\n              ...this.state.comments,\n            ],\n          });\n        }, 1000);\n      };\n    \n      handleChange = e => {\n        this.setState({\n          value: e.target.value,\n        });\n      };\n    render() {\n        const { visible, confirmLoading ,name,userDetail} = this.props;\n        const { comments, submitting, value } = this.state;\n        return (\n            <Modal\n            width={900}\n                title={name}\n                visible={visible}\n                onOk={this.props.handleOk}\n                confirmLoading={confirmLoading}\n                onCancel={this.props.handleCancel}\n            >\n                <div>\n                    <Comment\n                        avatar={\n                            <Avatar\n                                src={userDetail.image}\n                                alt={userDetail.user_name}\n                            />\n                        }\n                        content={\n                            <Editor\n                                onChange={this.handleChange}\n                                onSubmit={this.handleSubmit}\n                                submitting={submitting}\n                                value={value}\n                            />\n                        }\n                    />\n                    {comments.length > 0 && <Comment\n        actions={actions}\n        author={<a>Han Solo</a>}\n        avatar={\n          <Avatar\n            src=\"https://zos.alipayobjects.com/rmsportal/ODTLcjxAfvqbxHnVXCYX.png\"\n            alt=\"Han Solo\"\n          />\n        }\n        content={\n          <p>\n            We supply a series of design principles, practical patterns and high quality design\n            resources (Sketch and Axure), to help people create their product prototypes beautifully\n            and efficiently.\n          </p>\n        }\n        datetime={\n          <Tooltip title={moment().format('YYYY-MM-DD HH:mm:ss')}>\n            <span>{moment().fromNow()}</span>\n          </Tooltip>\n        }\n      />}\n                </div>\n            </Modal>\n        );\n    }\n}"]},"metadata":{},"sourceType":"module"}