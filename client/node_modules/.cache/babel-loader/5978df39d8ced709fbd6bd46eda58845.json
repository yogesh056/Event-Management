{"ast":null,"code":"var _jsxFileName = \"/Users/yogeshwaranramesh/College/Event-Management/client/src/components/Modules/Events/Feed/CommentModal.jsx\";\nimport React from 'react';\nimport { Comment, Avatar, Form, Button, List, Input, Modal, Icon, message, Tooltip } from 'antd';\nimport moment from 'moment';\nimport API from \"../../../../middleware/api\";\nconst TextArea = Input.TextArea;\nconst userDetails = localStorage.getItem('user');\n\nconst Editor = ({\n  onChange,\n  onSubmit,\n  submitting,\n  value\n}) => React.createElement(\"div\", {\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 10\n  },\n  __self: this\n}, React.createElement(Form.Item, {\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 11\n  },\n  __self: this\n}, React.createElement(TextArea, {\n  rows: 4,\n  onChange: onChange,\n  value: value,\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 12\n  },\n  __self: this\n})), React.createElement(Form.Item, {\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 14\n  },\n  __self: this\n}, React.createElement(Button, {\n  htmlType: \"submit\",\n  loading: submitting,\n  onClick: onSubmit,\n  type: \"primary\",\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 15\n  },\n  __self: this\n}, React.createElement(Icon, {\n  type: \"message\",\n  key: \"skeleton-message\",\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 16\n  },\n  __self: this\n}), \" Add Comment\")));\n\nexport default class CommentModal extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.getComments = async () => {\n      let response = await API.post('/events/getComments', {\n        event_id: this.props.event.id\n      }); // response.data.code === 200 ? message.success(response.data.msg, 4) : message.error(response.data.msg, 4);    \n\n      this.setState({\n        comments: response.data.response,\n        eventLoading: false\n      });\n    };\n\n    this.handleSubmit = () => {\n      if (!this.state.value) {\n        return;\n      }\n\n      this.setState({\n        submitting: true\n      });\n      setTimeout(() => {\n        this.setState({\n          submitting: false,\n          value: '',\n          comments: [{\n            author: this.props.userDetail.user_name,\n            avatar: this.props.userDetail.image,\n            content: React.createElement(\"p\", {\n              __source: {\n                fileName: _jsxFileName,\n                lineNumber: 58\n              },\n              __self: this\n            }, this.state.value),\n            datetime: moment().fromNow()\n          }, ...this.state.comments]\n        });\n      }, 1000);\n    };\n\n    this.handleChange = e => {\n      this.setState({\n        value: e.target.value\n      });\n    };\n\n    console.log(\"CM\", this.props);\n    this.state = {\n      comments: [],\n      submitting: false,\n      value: ''\n    };\n  }\n\n  componentWillMount() {\n    this.getComments();\n  }\n\n  render() {\n    const _this$props = this.props,\n          visible = _this$props.visible,\n          confirmLoading = _this$props.confirmLoading,\n          name = _this$props.name,\n          userDetail = _this$props.userDetail;\n    const _this$state = this.state,\n          comments = _this$state.comments,\n          submitting = _this$state.submitting,\n          value = _this$state.value;\n    return React.createElement(Modal, {\n      width: 900,\n      title: name,\n      visible: visible,\n      onOk: this.props.handleOk,\n      confirmLoading: confirmLoading,\n      onCancel: this.props.handleCancel,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 76\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 84\n      },\n      __self: this\n    }, React.createElement(Comment, {\n      avatar: React.createElement(Avatar, {\n        src: userDetail.image,\n        alt: userDetail.user_name,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 87\n        },\n        __self: this\n      }),\n      content: React.createElement(Editor, {\n        onChange: this.handleChange,\n        onSubmit: this.handleSubmit,\n        submitting: submitting,\n        value: value,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 93\n        },\n        __self: this\n      }),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 85\n      },\n      __self: this\n    }), comments.length > 0 && React.createElement(List, {\n      dataSource: comments,\n      header: `${comments.length} ${comments.length > 1 ? 'comments' : 'comment'}`,\n      itemLayout: \"horizontal\",\n      renderItem: item => React.createElement(Comment, {\n        author: item.user.user_name,\n        avatar: React.createElement(Avatar, {\n          src: item.user.image,\n          alt: item.user.user_name,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 109\n          },\n          __self: this\n        }),\n        content: React.createElement(\"p\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 115\n          },\n          __self: this\n        }, item.comment),\n        datetime: React.createElement(Tooltip, {\n          title: moment(item.createdAt).format('YYYY-MM-DD HH:mm:ss'),\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 120\n          },\n          __self: this\n        }, React.createElement(\"span\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 121\n          },\n          __self: this\n        }, moment().fromNow())),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 106\n        },\n        __self: this\n      }),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 101\n      },\n      __self: this\n    })));\n  }\n\n}","map":{"version":3,"sources":["/Users/yogeshwaranramesh/College/Event-Management/client/src/components/Modules/Events/Feed/CommentModal.jsx"],"names":["React","Comment","Avatar","Form","Button","List","Input","Modal","Icon","message","Tooltip","moment","API","TextArea","userDetails","localStorage","getItem","Editor","onChange","onSubmit","submitting","value","CommentModal","Component","constructor","props","getComments","response","post","event_id","event","id","setState","comments","data","eventLoading","handleSubmit","state","setTimeout","author","userDetail","user_name","avatar","image","content","datetime","fromNow","handleChange","e","target","console","log","componentWillMount","render","visible","confirmLoading","name","handleOk","handleCancel","length","item","user","comment","createdAt","format"],"mappings":"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","sourcesContent":["import React from 'react';\nimport { Comment, Avatar, Form, Button, List, Input, Modal, Icon, message, Tooltip } from 'antd';\nimport moment from 'moment';\nimport API from \"../../../../middleware/api\"\nconst { TextArea } = Input;\nconst userDetails = localStorage.getItem('user')\n\n\nconst Editor = ({ onChange, onSubmit, submitting, value }) => (\n    <div>\n        <Form.Item>\n            <TextArea rows={4} onChange={onChange} value={value} />\n        </Form.Item>\n        <Form.Item>\n            <Button htmlType=\"submit\" loading={submitting} onClick={onSubmit} type=\"primary\">\n                <Icon type=\"message\" key=\"skeleton-message\" /> Add Comment\n      </Button>\n        </Form.Item>\n    </div>\n);\nexport default class CommentModal extends React.Component {\n    constructor(props) {\n        super(props);\n        console.log(\"CM\", this.props)\n        this.state = {\n            comments: [],\n            submitting: false,\n            value: '',\n        };\n    }\n    componentWillMount() {\n        this.getComments()\n    }\n    getComments = async () => {\n        let response = await API.post('/events/getComments', { event_id: this.props.event.id })\n        // response.data.code === 200 ? message.success(response.data.msg, 4) : message.error(response.data.msg, 4);    \n\n        this.setState({ comments: response.data.response, eventLoading: false })\n\n    }\n    handleSubmit = () => {\n        if (!this.state.value) {\n            return;\n        }\n\n        this.setState({\n            submitting: true,\n        });\n\n        setTimeout(() => {\n            this.setState({\n                submitting: false,\n                value: '',\n                comments: [\n                    {\n                        author: this.props.userDetail.user_name,\n                        avatar: this.props.userDetail.image,\n                        content: <p>{this.state.value}</p>,\n                        datetime: moment().fromNow(),\n                    },\n                    ...this.state.comments,\n                ],\n            });\n        }, 1000);\n    };\n\n    handleChange = e => {\n        this.setState({\n            value: e.target.value,\n        });\n    };\n    render() {\n        const { visible, confirmLoading, name, userDetail } = this.props;\n        const { comments, submitting, value } = this.state;\n        return (\n            <Modal\n                width={900}\n                title={name}\n                visible={visible}\n                onOk={this.props.handleOk}\n                confirmLoading={confirmLoading}\n                onCancel={this.props.handleCancel}\n            >\n                <div>\n                    <Comment\n                        avatar={\n                            <Avatar\n                                src={userDetail.image}\n                                alt={userDetail.user_name}\n                            />\n                        }\n                        content={\n                            <Editor\n                                onChange={this.handleChange}\n                                onSubmit={this.handleSubmit}\n                                submitting={submitting}\n                                value={value}\n                            />\n                        }\n                    />\n                    {comments.length > 0 && <List\n                        dataSource={comments}\n                        header={`${comments.length} ${comments.length > 1 ? 'comments' : 'comment'}`}\n                        itemLayout=\"horizontal\"\n                        renderItem={item =>\n                            <Comment\n                                author={item.user.user_name}\n                                avatar={\n                                    <Avatar\n                                        src={item.user.image}\n                                        alt={item.user.user_name}\n                                    />\n                                }\n                                content={\n                                    <p>\n                                        {item.comment}\n                                    </p>\n                                }\n                                datetime={\n                                    <Tooltip title={moment(item.createdAt).format('YYYY-MM-DD HH:mm:ss')}>\n                                        <span>{moment().fromNow()}</span>\n                                    </Tooltip>\n                                }\n                            />}\n                    />\n                    }\n                </div>\n            </Modal>\n        );\n    }\n}"]},"metadata":{},"sourceType":"module"}