{"ast":null,"code":"var _jsxFileName = \"/Users/yogeshwaranramesh/College/Event-Management/client/src/components/Modules/Events/SingleEventModal.jsx\";\nimport React from 'react';\nimport { Comment, Form, Button, Input, Modal } from 'antd';\nimport moment from 'moment';\nimport API from \"../../../../middleware/api\";\nimport { Skeleton, Switch, List, Avatar, Icon, Tooltip, Progress, message, Typography, Tag, Divider, Card, Empty } from 'antd';\nconst Text = Typography.Text;\nconst Meta = Card.Meta;\nconst TextArea = Input.TextArea;\nconst userDetails = localStorage.getItem('user');\n\nconst Editor = ({\n  onChange,\n  onSubmit,\n  submitting,\n  value\n}) => React.createElement(\"div\", {\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 13\n  },\n  __self: this\n}, React.createElement(Form.Item, {\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 14\n  },\n  __self: this\n}, React.createElement(TextArea, {\n  rows: 4,\n  onChange: onChange,\n  value: value,\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 15\n  },\n  __self: this\n})), React.createElement(Form.Item, {\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 17\n  },\n  __self: this\n}, React.createElement(Button, {\n  htmlType: \"submit\",\n  loading: submitting,\n  onClick: onSubmit,\n  type: \"primary\",\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 18\n  },\n  __self: this\n}, React.createElement(Icon, {\n  type: \"message\",\n  key: \"skeleton-message\",\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 19\n  },\n  __self: this\n}), \" Add Comment\")));\n\nexport default class SingleEventModal extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.eventUpdate = async () => {\n      let eventRes = await API.post('/events/getEvent', {\n        event_id: this.props.eventDetails.id,\n        user_id: this.props.userDetail.id\n      });\n      this.setState({\n        comments: eventRes.data.comments,\n        upVote: eventRes.data.upVote,\n        downVote: eventRes.data.downVote,\n        eventLoading: false,\n        voteBool: eventRes.data.voteBool\n      }, () => {\n        console.log(\"Current Event\", this.state);\n      });\n    };\n\n    this.likeFunc = async voteBool => {\n      let res = await API.post('/events/vote', {\n        event_id: this.props.eventDetails.id,\n        user_id: this.props.userDetail.id,\n        vote_bool: voteBool\n      });\n      this.eventUpdate();\n    };\n\n    this.handleSubmit = async () => {\n      if (!this.state.value) {\n        return;\n      }\n\n      this.setState({\n        submitting: true\n      });\n      let response = await API.post('/events/addComment', {\n        event_id: this.props.eventDetails.id,\n        user_id: this.props.userDetail.id,\n        comment: this.state.value\n      });\n      response.data.code === 200 ? message.success(response.data.msg, 4) : message.error(response.data.msg, 4);\n      this.eventUpdate();\n      setTimeout(() => {\n        this.setState({\n          submitting: false\n        });\n      }, 1000);\n    };\n\n    this.handleChange = e => {\n      this.setState({\n        value: e.target.value\n      });\n    };\n\n    this.state = {\n      comments: [],\n      submitting: false,\n      value: ''\n    };\n  }\n\n  componentWillMount() {\n    this.eventUpdate();\n  }\n\n  componentDidUpdate(prevProps) {\n    if (JSON.stringify(this.props) !== JSON.stringify(prevProps)) {\n      this.eventUpdate();\n      return true;\n    } else return false;\n  }\n\n  render() {\n    const _this$props = this.props,\n          visible = _this$props.visible,\n          name = _this$props.name,\n          userDetail = _this$props.userDetail,\n          eventDetails = _this$props.eventDetails;\n    const _this$state = this.state,\n          comments = _this$state.comments,\n          submitting = _this$state.submitting,\n          value = _this$state.value,\n          downVote = _this$state.downVote,\n          upVote = _this$state.upVote,\n          voteBool = _this$state.voteBool;\n    return React.createElement(Modal, {\n      width: 900,\n      title: name,\n      footer: null,\n      visible: visible,\n      onCancel: this.props.handleCancel,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 82\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"event-single-wrap\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 89\n      },\n      __self: this\n    }, eventDetails && React.createElement(Card, {\n      title: React.createElement(Meta, {\n        avatar: React.createElement(Avatar, {\n          src: eventDetails.user.image,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 92\n          },\n          __self: this\n        }),\n        title: eventDetails.user.user_name,\n        description: \"a few second ago\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 91\n        },\n        __self: this\n      }),\n      style: {\n        width: \"100%\"\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 90\n      },\n      __self: this\n    }, React.createElement(Card, {\n      style: {\n        width: \"100%\"\n      },\n      className: \"main-wrap-card\",\n      cover: React.createElement(\"img\", {\n        alt: \"example\",\n        src: eventDetails.images,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 103\n        },\n        __self: this\n      }),\n      actions: [React.createElement(\"span\", {\n        key: \"comment-basic-like\",\n        style: {\n          color: voteBool === \"liked\" ? \"cornflowerblue\" : \"\"\n        },\n        onClick: () => this.likeFunc(true),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 109\n        },\n        __self: this\n      }, React.createElement(Tooltip, {\n        title: \"Like\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 110\n        },\n        __self: this\n      }, React.createElement(Icon, {\n        type: \"like-o\",\n        key: \"skeleton-star-o\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 111\n        },\n        __self: this\n      })), React.createElement(\"span\", {\n        style: {\n          paddingLeft: 8,\n          cursor: 'auto'\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 113\n        },\n        __self: this\n      }, upVote)), React.createElement(\"span\", {\n        key: \"comment-basic-like\",\n        style: {\n          color: voteBool === \"disliked\" ? \"cornflowerblue\" : \"\"\n        },\n        onClick: () => this.likeFunc(false),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 115\n        },\n        __self: this\n      }, React.createElement(Tooltip, {\n        title: \"DisLike\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 116\n        },\n        __self: this\n      }, React.createElement(Icon, {\n        type: \"dislike-o\",\n        key: \"skeleton-like-o\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 117\n        },\n        __self: this\n      })), React.createElement(\"span\", {\n        style: {\n          paddingLeft: 8,\n          cursor: 'auto'\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 119\n        },\n        __self: this\n      }, downVote)), React.createElement(\"span\", {\n        key: \"comment-basic-like\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 121\n        },\n        __self: this\n      }, React.createElement(Tooltip, {\n        title: \"Share\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 122\n        },\n        __self: this\n      }, React.createElement(Icon, {\n        type: \"share-alt\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 123\n        },\n        __self: this\n      })), React.createElement(\"span\", {\n        style: {\n          paddingLeft: 8,\n          cursor: 'auto'\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 125\n        },\n        __self: this\n      }, \"Share\"))],\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 99\n      },\n      __self: this\n    }, React.createElement(Meta // avatar={<Avatar src=\"https://zos.alipayobjects.com/rmsportal/ODTLcjxAfvqbxHnVXCYX.png\" />}\n    , {\n      title: eventDetails.name,\n      description: eventDetails.description,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 129\n      },\n      __self: this\n    }), React.createElement(Progress, {\n      percent: 30,\n      size: \"small\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 135\n      },\n      __self: this\n    }))), userDetail && React.createElement(Comment, {\n      avatar: React.createElement(Avatar, {\n        src: userDetail.image,\n        alt: userDetail.user_name,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 140\n        },\n        __self: this\n      }),\n      content: React.createElement(Editor, {\n        onChange: this.handleChange,\n        onSubmit: this.handleSubmit,\n        submitting: submitting,\n        value: value,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 146\n        },\n        __self: this\n      }),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 138\n      },\n      __self: this\n    }), comments.length > 0 ? React.createElement(List, {\n      dataSource: comments,\n      header: `${comments.length} ${comments.length > 1 ? 'comments' : 'comment'}`,\n      itemLayout: \"horizontal\",\n      renderItem: item => item.author ? React.createElement(React.Fragment, null) : React.createElement(List.Item, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 161\n        },\n        __self: this\n      }, React.createElement(Comment, {\n        style: {\n          width: \"100%\"\n        },\n        author: item.user.user_name,\n        avatar: React.createElement(Avatar, {\n          src: item.user.image,\n          alt: item.user.user_name,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 166\n          },\n          __self: this\n        }),\n        content: React.createElement(\"p\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 172\n          },\n          __self: this\n        }, item.comment),\n        datetime: React.createElement(Tooltip, {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 177\n          },\n          __self: this\n        }, React.createElement(\"span\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 178\n          },\n          __self: this\n        }, moment(item.createdAt).fromNow())),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 162\n        },\n        __self: this\n      }), React.createElement(\"span\", {\n        style: {\n          color: \"red\",\n          fontSize: \"14px\"\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 182\n        },\n        __self: this\n      }, item.user.id === userDetail.id ? React.createElement(Icon, {\n        type: \"delete\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 183\n        },\n        __self: this\n      }) : \"\")),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 155\n      },\n      __self: this\n    }) : React.createElement(Empty, {\n      description: \"No Comments\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 188\n      },\n      __self: this\n    })));\n  }\n\n}","map":{"version":3,"sources":["/Users/yogeshwaranramesh/College/Event-Management/client/src/components/Modules/Events/SingleEventModal.jsx"],"names":["React","Comment","Form","Button","Input","Modal","moment","API","Skeleton","Switch","List","Avatar","Icon","Tooltip","Progress","message","Typography","Tag","Divider","Card","Empty","Text","Meta","TextArea","userDetails","localStorage","getItem","Editor","onChange","onSubmit","submitting","value","SingleEventModal","Component","constructor","props","eventUpdate","eventRes","post","event_id","eventDetails","id","user_id","userDetail","setState","comments","data","upVote","downVote","eventLoading","voteBool","console","log","state","likeFunc","res","vote_bool","handleSubmit","response","comment","code","success","msg","error","setTimeout","handleChange","e","target","componentWillMount","componentDidUpdate","prevProps","JSON","stringify","render","visible","name","handleCancel","user","image","user_name","width","images","color","paddingLeft","cursor","description","length","item","author","createdAt","fromNow","fontSize"],"mappings":"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","sourcesContent":["import React from 'react';\nimport { Comment, Form, Button, Input, Modal } from 'antd';\nimport moment from 'moment';\nimport API from \"../../../../middleware/api\"\nimport { Skeleton, Switch, List, Avatar, Icon, Tooltip, Progress, message, Typography, Tag, Divider, Card, Empty } from 'antd';\nconst { Text } = Typography;\nconst { Meta } = Card;\nconst { TextArea } = Input;\nconst userDetails = localStorage.getItem('user')\n\n\nconst Editor = ({ onChange, onSubmit, submitting, value }) => (\n    <div>\n        <Form.Item>\n            <TextArea rows={4} onChange={onChange} value={value} />\n        </Form.Item>\n        <Form.Item>\n            <Button htmlType=\"submit\" loading={submitting} onClick={onSubmit} type=\"primary\">\n                <Icon type=\"message\" key=\"skeleton-message\" /> Add Comment\n      </Button>\n        </Form.Item>\n    </div>\n);\nexport default class SingleEventModal extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            comments: [],\n            submitting: false,\n            value: '',\n        };\n    }\n    componentWillMount() {\n        this.eventUpdate()\n    }\n    componentDidUpdate(prevProps) {\n        if (JSON.stringify(this.props) !== JSON.stringify(prevProps)) {\n            this.eventUpdate()\n            return true;\n        } else return false;\n    }\n    eventUpdate = async () => {\n        let eventRes = await API.post('/events/getEvent', { event_id: this.props.eventDetails.id, user_id: this.props.userDetail.id })\n        this.setState({ comments: eventRes.data.comments, upVote: eventRes.data.upVote, downVote: eventRes.data.downVote, eventLoading: false, voteBool: eventRes.data.voteBool }, () => {\n            console.log(\"Current Event\", this.state)\n        }\n\n        )\n\n    }\n    likeFunc = async (voteBool) => {\n        let res = await API.post('/events/vote', { event_id: this.props.eventDetails.id, user_id: this.props.userDetail.id, vote_bool: voteBool })\n        this.eventUpdate()\n    }\n    handleSubmit = async () => {\n        if (!this.state.value) {\n            return;\n        }\n\n        this.setState({\n            submitting: true,\n        });\n        let response = await API.post('/events/addComment', { event_id: this.props.eventDetails.id, user_id: this.props.userDetail.id, comment: this.state.value })\n        response.data.code === 200 ? message.success(response.data.msg, 4) : message.error(response.data.msg, 4);\n        this.eventUpdate()\n        setTimeout(() => {\n            this.setState({\n                submitting: false,\n            });\n        }, 1000);\n    };\n\n    handleChange = e => {\n        this.setState({\n            value: e.target.value,\n        });\n    };\n    render() {\n        const { visible, name, userDetail, eventDetails } = this.props;\n        const { comments, submitting, value, downVote, upVote, voteBool } = this.state;\n        return (\n            <Modal\n                width={900}\n                title={name}\n                footer={null}\n                visible={visible}\n                onCancel={this.props.handleCancel}\n            >\n                <div className=\"event-single-wrap\">\n                    {eventDetails && <Card\n                        title={<Meta\n                            avatar={<Avatar src={eventDetails.user.image} />}\n                            title={eventDetails.user.user_name}\n                            description=\"a few second ago\"\n                        />}\n                        style={{ width: \"100%\" }}\n                    >\n\n                        <Card\n                            style={{ width: \"100%\" }}\n                            className=\"main-wrap-card\"\n                            cover={\n                                <img\n                                    alt=\"example\"\n                                    src={eventDetails.images}\n                                />\n                            }\n                            actions={[\n                                <span key=\"comment-basic-like\" style={{ color: voteBool === \"liked\" ? \"cornflowerblue\" : \"\" }} onClick={() => this.likeFunc(true)}>\n                                    <Tooltip title=\"Like\">\n                                        <Icon type=\"like-o\" key=\"skeleton-star-o\" />\n                                    </Tooltip>\n                                    <span style={{ paddingLeft: 8, cursor: 'auto' }}>{upVote}</span>\n                                </span>,\n                                <span key=\"comment-basic-like\" style={{ color: voteBool === \"disliked\" ? \"cornflowerblue\" : \"\" }} onClick={() => this.likeFunc(false)}>\n                                    <Tooltip title=\"DisLike\">\n                                        <Icon type=\"dislike-o\" key=\"skeleton-like-o\" />\n                                    </Tooltip>\n                                    <span style={{ paddingLeft: 8, cursor: 'auto' }}>{downVote}</span>\n                                </span>,\n                                <span key=\"comment-basic-like\" >\n                                    <Tooltip title=\"Share\">\n                                        <Icon type=\"share-alt\" />\n                                    </Tooltip>\n                                    <span style={{ paddingLeft: 8, cursor: 'auto' }}>{\"Share\"}</span>\n                                </span>,\n                            ]}\n                        >\n                            <Meta\n                                // avatar={<Avatar src=\"https://zos.alipayobjects.com/rmsportal/ODTLcjxAfvqbxHnVXCYX.png\" />}\n                                title={eventDetails.name}\n                                description={eventDetails.description}\n                            />\n\n                            <Progress percent={30} size=\"small\" />\n                        </Card>\n                    </Card>}\n                    {userDetail && <Comment\n                        avatar={\n                            <Avatar\n                                src={userDetail.image}\n                                alt={userDetail.user_name}\n                            />\n                        }\n                        content={\n                            <Editor\n                                onChange={this.handleChange}\n                                onSubmit={this.handleSubmit}\n                                submitting={submitting}\n                                value={value}\n                            />\n                        }\n                    />}\n                    {comments.length > 0 ?\n                        <List\n                            dataSource={comments}\n                            header={`${comments.length} ${comments.length > 1 ? 'comments' : 'comment'}`}\n                            itemLayout=\"horizontal\"\n                            renderItem={item =>\n                                item.author ? <></> :\n                                    <List.Item>\n                                        <Comment\n                                            style={{ width: \"100%\" }}\n                                            author={item.user.user_name}\n                                            avatar={\n                                                <Avatar\n                                                    src={item.user.image}\n                                                    alt={item.user.user_name}\n                                                />\n                                            }\n                                            content={\n                                                <p>\n                                                    {item.comment}\n                                                </p>\n                                            }\n                                            datetime={\n                                                <Tooltip >\n                                                    <span>{moment(item.createdAt).fromNow()}</span>\n                                                </Tooltip>\n                                            }\n                                        />\n                                        <span style={{ color: \"red\", fontSize: \"14px\" }}>\n                                            {item.user.id === userDetail.id ? <Icon type=\"delete\" /> : \"\"}\n                                        </span>\n\n                                    </List.Item>\n                            }\n                        /> : <Empty description={\"No Comments\"} />\n                    }\n                </div>\n            </Modal>\n        );\n    }\n}"]},"metadata":{},"sourceType":"module"}