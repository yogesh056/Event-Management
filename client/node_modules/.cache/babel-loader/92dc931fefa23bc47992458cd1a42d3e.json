{"ast":null,"code":"import _slicedToArray from \"/Users/yogeshwaranramesh/College/Event-Management/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"/Users/yogeshwaranramesh/College/Event-Management/client/src/components/GoogleMaps/GoogleMaps.jsx\";\nimport React from 'react';\nimport TextField from '@material-ui/core/TextField';\nimport Autocomplete from '@material-ui/lab/Autocomplete';\nimport LocationOnIcon from '@material-ui/icons/LocationOn';\nimport Grid from '@material-ui/core/Grid';\nimport Typography from '@material-ui/core/Typography';\nimport { makeStyles } from '@material-ui/core/styles';\nimport parse from 'autosuggest-highlight/parse';\nimport throttle from 'lodash/throttle';\n\nfunction loadScript(src, position, id) {\n  if (!position) {\n    return;\n  }\n\n  const script = document.createElement('script');\n  script.setAttribute('async', '');\n  script.setAttribute('id', id);\n  script.src = src;\n  position.appendChild(script);\n}\n\nconst autocompleteService = {\n  current: null\n};\nconst useStyles = makeStyles(theme => ({\n  icon: {\n    color: theme.palette.text.secondary,\n    marginRight: theme.spacing(2)\n  }\n}));\nexport default function GoogleMaps() {\n  const classes = useStyles();\n\n  const _React$useState = React.useState(''),\n        _React$useState2 = _slicedToArray(_React$useState, 2),\n        inputValue = _React$useState2[0],\n        setInputValue = _React$useState2[1];\n\n  const _React$useState3 = React.useState([]),\n        _React$useState4 = _slicedToArray(_React$useState3, 2),\n        options = _React$useState4[0],\n        setOptions = _React$useState4[1];\n\n  const loaded = React.useRef(false);\n\n  if (typeof window !== 'undefined' && !loaded.current) {\n    if (!document.querySelector('#google-maps')) {\n      loadScript('https://maps.googleapis.com/maps/api/js?key=AIzaSyBwRp1e12ec1vOTtGiA4fcCt2sCUS78UYc&libraries=places', document.querySelector('head'), 'google-maps');\n    }\n\n    loaded.current = true;\n  }\n\n  const handleChange = event => {\n    setInputValue(event.target.value);\n  };\n\n  const fetch = React.useMemo(() => throttle((input, callback) => {\n    autocompleteService.current.getPlacePredictions(input, callback);\n  }, 200), []);\n  React.useEffect(() => {\n    let active = true;\n    console.log;\n\n    if (!autocompleteService.current && window.google) {\n      autocompleteService.current = new window.google.maps.places.AutocompleteService();\n    }\n\n    if (!autocompleteService.current) {\n      return undefined;\n    }\n\n    if (inputValue === '') {\n      setOptions([]);\n      return undefined;\n    }\n\n    fetch({\n      input: inputValue\n    }, results => {\n      if (active) {\n        setOptions(results || []);\n      }\n    });\n    return () => {\n      active = false;\n    };\n  }, [inputValue, fetch]);\n  return React.createElement(Autocomplete, {\n    id: \"google-map-demo\",\n    style: {\n      width: 300\n    },\n    getOptionLabel: option => typeof option === 'string' ? option : option.description,\n    filterOptions: x => x,\n    options: options,\n    autoComplete: true,\n    includeInputInList: true,\n    freeSolo: true,\n    disableOpenOnFocus: true,\n    renderInput: params => React.createElement(TextField, Object.assign({}, params, {\n      label: \"Add a location\",\n      variant: \"outlined\",\n      fullWidth: true,\n      onChange: handleChange,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 101\n      },\n      __self: this\n    })),\n    renderOption: option => {\n      const matches = option.structured_formatting.main_text_matched_substrings;\n      const parts = parse(option.structured_formatting.main_text, matches.map(match => [match.offset, match.offset + match.length]));\n      return React.createElement(Grid, {\n        container: true,\n        alignItems: \"center\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 117\n        },\n        __self: this\n      }, React.createElement(Grid, {\n        item: true,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 118\n        },\n        __self: this\n      }, React.createElement(LocationOnIcon, {\n        className: classes.icon,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 119\n        },\n        __self: this\n      })), React.createElement(Grid, {\n        item: true,\n        xs: true,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 121\n        },\n        __self: this\n      }, parts.map((part, index) => React.createElement(\"span\", {\n        key: index,\n        style: {\n          fontWeight: part.highlight ? 700 : 400\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 123\n        },\n        __self: this\n      }, part.text)), React.createElement(Typography, {\n        variant: \"body2\",\n        color: \"textSecondary\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 128\n        },\n        __self: this\n      }, option.structured_formatting.secondary_text)));\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 90\n    },\n    __self: this\n  });\n}","map":{"version":3,"sources":["/Users/yogeshwaranramesh/College/Event-Management/client/src/components/GoogleMaps/GoogleMaps.jsx"],"names":["React","TextField","Autocomplete","LocationOnIcon","Grid","Typography","makeStyles","parse","throttle","loadScript","src","position","id","script","document","createElement","setAttribute","appendChild","autocompleteService","current","useStyles","theme","icon","color","palette","text","secondary","marginRight","spacing","GoogleMaps","classes","useState","inputValue","setInputValue","options","setOptions","loaded","useRef","window","querySelector","handleChange","event","target","value","fetch","useMemo","input","callback","getPlacePredictions","useEffect","active","console","log","google","maps","places","AutocompleteService","undefined","results","width","option","description","x","params","matches","structured_formatting","main_text_matched_substrings","parts","main_text","map","match","offset","length","part","index","fontWeight","highlight","secondary_text"],"mappings":";;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,SAAP,MAAsB,6BAAtB;AACA,OAAOC,YAAP,MAAyB,+BAAzB;AACA,OAAOC,cAAP,MAA2B,+BAA3B;AACA,OAAOC,IAAP,MAAiB,wBAAjB;AACA,OAAOC,UAAP,MAAuB,8BAAvB;AACA,SAASC,UAAT,QAA2B,0BAA3B;AACA,OAAOC,KAAP,MAAkB,6BAAlB;AACA,OAAOC,QAAP,MAAqB,iBAArB;;AAEA,SAASC,UAAT,CAAoBC,GAApB,EAAyBC,QAAzB,EAAmCC,EAAnC,EAAuC;AACrC,MAAI,CAACD,QAAL,EAAe;AACb;AACD;;AAED,QAAME,MAAM,GAAGC,QAAQ,CAACC,aAAT,CAAuB,QAAvB,CAAf;AACAF,EAAAA,MAAM,CAACG,YAAP,CAAoB,OAApB,EAA6B,EAA7B;AACAH,EAAAA,MAAM,CAACG,YAAP,CAAoB,IAApB,EAA0BJ,EAA1B;AACAC,EAAAA,MAAM,CAACH,GAAP,GAAaA,GAAb;AACAC,EAAAA,QAAQ,CAACM,WAAT,CAAqBJ,MAArB;AACD;;AAED,MAAMK,mBAAmB,GAAG;AAAEC,EAAAA,OAAO,EAAE;AAAX,CAA5B;AAEA,MAAMC,SAAS,GAAGd,UAAU,CAACe,KAAK,KAAK;AACrCC,EAAAA,IAAI,EAAE;AACJC,IAAAA,KAAK,EAAEF,KAAK,CAACG,OAAN,CAAcC,IAAd,CAAmBC,SADtB;AAEJC,IAAAA,WAAW,EAAEN,KAAK,CAACO,OAAN,CAAc,CAAd;AAFT;AAD+B,CAAL,CAAN,CAA5B;AAOA,eAAe,SAASC,UAAT,GAAsB;AACnC,QAAMC,OAAO,GAAGV,SAAS,EAAzB;;AADmC,0BAECpB,KAAK,CAAC+B,QAAN,CAAe,EAAf,CAFD;AAAA;AAAA,QAE5BC,UAF4B;AAAA,QAEhBC,aAFgB;;AAAA,2BAGLjC,KAAK,CAAC+B,QAAN,CAAe,EAAf,CAHK;AAAA;AAAA,QAG5BG,OAH4B;AAAA,QAGnBC,UAHmB;;AAInC,QAAMC,MAAM,GAAGpC,KAAK,CAACqC,MAAN,CAAa,KAAb,CAAf;;AAEA,MAAI,OAAOC,MAAP,KAAkB,WAAlB,IAAiC,CAACF,MAAM,CAACjB,OAA7C,EAAsD;AACpD,QAAI,CAACL,QAAQ,CAACyB,aAAT,CAAuB,cAAvB,CAAL,EAA6C;AAC3C9B,MAAAA,UAAU,CACR,sGADQ,EAERK,QAAQ,CAACyB,aAAT,CAAuB,MAAvB,CAFQ,EAGR,aAHQ,CAAV;AAKD;;AAEDH,IAAAA,MAAM,CAACjB,OAAP,GAAiB,IAAjB;AACD;;AAED,QAAMqB,YAAY,GAAGC,KAAK,IAAI;AAE5BR,IAAAA,aAAa,CAACQ,KAAK,CAACC,MAAN,CAAaC,KAAd,CAAb;AACD,GAHD;;AAKA,QAAMC,KAAK,GAAG5C,KAAK,CAAC6C,OAAN,CACZ,MACErC,QAAQ,CAAC,CAACsC,KAAD,EAAQC,QAAR,KAAqB;AAC5B7B,IAAAA,mBAAmB,CAACC,OAApB,CAA4B6B,mBAA5B,CAAgDF,KAAhD,EAAuDC,QAAvD;AACD,GAFO,EAEL,GAFK,CAFE,EAKZ,EALY,CAAd;AAQA/C,EAAAA,KAAK,CAACiD,SAAN,CAAgB,MAAM;AACpB,QAAIC,MAAM,GAAG,IAAb;AACAC,IAAAA,OAAO,CAACC,GAAR;;AACA,QAAI,CAAClC,mBAAmB,CAACC,OAArB,IAAgCmB,MAAM,CAACe,MAA3C,EAAmD;AACjDnC,MAAAA,mBAAmB,CAACC,OAApB,GAA8B,IAAImB,MAAM,CAACe,MAAP,CAAcC,IAAd,CAAmBC,MAAnB,CAA0BC,mBAA9B,EAA9B;AACD;;AACD,QAAI,CAACtC,mBAAmB,CAACC,OAAzB,EAAkC;AAChC,aAAOsC,SAAP;AACD;;AAED,QAAIzB,UAAU,KAAK,EAAnB,EAAuB;AACrBG,MAAAA,UAAU,CAAC,EAAD,CAAV;AACA,aAAOsB,SAAP;AACD;;AAEDb,IAAAA,KAAK,CAAC;AAAEE,MAAAA,KAAK,EAAEd;AAAT,KAAD,EAAwB0B,OAAO,IAAI;AACtC,UAAIR,MAAJ,EAAY;AACVf,QAAAA,UAAU,CAACuB,OAAO,IAAI,EAAZ,CAAV;AACD;AACF,KAJI,CAAL;AAMA,WAAO,MAAM;AACXR,MAAAA,MAAM,GAAG,KAAT;AACD,KAFD;AAGD,GAxBD,EAwBG,CAAClB,UAAD,EAAaY,KAAb,CAxBH;AA0BA,SACE,oBAAC,YAAD;AACE,IAAA,EAAE,EAAC,iBADL;AAEE,IAAA,KAAK,EAAE;AAAEe,MAAAA,KAAK,EAAE;AAAT,KAFT;AAGE,IAAA,cAAc,EAAEC,MAAM,IAAK,OAAOA,MAAP,KAAkB,QAAlB,GAA6BA,MAA7B,GAAsCA,MAAM,CAACC,WAH1E;AAIE,IAAA,aAAa,EAAEC,CAAC,IAAIA,CAJtB;AAKE,IAAA,OAAO,EAAE5B,OALX;AAME,IAAA,YAAY,MANd;AAOE,IAAA,kBAAkB,MAPpB;AAQE,IAAA,QAAQ,MARV;AASE,IAAA,kBAAkB,MATpB;AAUE,IAAA,WAAW,EAAE6B,MAAM,IACjB,oBAAC,SAAD,oBACMA,MADN;AAEE,MAAA,KAAK,EAAC,gBAFR;AAGE,MAAA,OAAO,EAAC,UAHV;AAIE,MAAA,SAAS,MAJX;AAKE,MAAA,QAAQ,EAAEvB,YALZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAXJ;AAmBE,IAAA,YAAY,EAAEoB,MAAM,IAAI;AACtB,YAAMI,OAAO,GAAGJ,MAAM,CAACK,qBAAP,CAA6BC,4BAA7C;AACA,YAAMC,KAAK,GAAG5D,KAAK,CACjBqD,MAAM,CAACK,qBAAP,CAA6BG,SADZ,EAEjBJ,OAAO,CAACK,GAAR,CAAYC,KAAK,IAAI,CAACA,KAAK,CAACC,MAAP,EAAeD,KAAK,CAACC,MAAN,GAAeD,KAAK,CAACE,MAApC,CAArB,CAFiB,CAAnB;AAKA,aACE,oBAAC,IAAD;AAAM,QAAA,SAAS,MAAf;AAAgB,QAAA,UAAU,EAAC,QAA3B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACE,oBAAC,IAAD;AAAM,QAAA,IAAI,MAAV;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACE,oBAAC,cAAD;AAAgB,QAAA,SAAS,EAAE1C,OAAO,CAACR,IAAnC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QADF,CADF,EAIE,oBAAC,IAAD;AAAM,QAAA,IAAI,MAAV;AAAW,QAAA,EAAE,MAAb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACG6C,KAAK,CAACE,GAAN,CAAU,CAACI,IAAD,EAAOC,KAAP,KACT;AAAM,QAAA,GAAG,EAAEA,KAAX;AAAkB,QAAA,KAAK,EAAE;AAAEC,UAAAA,UAAU,EAAEF,IAAI,CAACG,SAAL,GAAiB,GAAjB,GAAuB;AAArC,SAAzB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACGH,IAAI,CAAChD,IADR,CADD,CADH,EAOE,oBAAC,UAAD;AAAY,QAAA,OAAO,EAAC,OAApB;AAA4B,QAAA,KAAK,EAAC,eAAlC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACGmC,MAAM,CAACK,qBAAP,CAA6BY,cADhC,CAPF,CAJF,CADF;AAkBD,KA5CH;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADF;AAgDD","sourcesContent":["import React from 'react';\nimport TextField from '@material-ui/core/TextField';\nimport Autocomplete from '@material-ui/lab/Autocomplete';\nimport LocationOnIcon from '@material-ui/icons/LocationOn';\nimport Grid from '@material-ui/core/Grid';\nimport Typography from '@material-ui/core/Typography';\nimport { makeStyles } from '@material-ui/core/styles';\nimport parse from 'autosuggest-highlight/parse';\nimport throttle from 'lodash/throttle';\n\nfunction loadScript(src, position, id) {\n  if (!position) {\n    return;\n  }\n\n  const script = document.createElement('script');\n  script.setAttribute('async', '');\n  script.setAttribute('id', id);\n  script.src = src;\n  position.appendChild(script);\n}\n\nconst autocompleteService = { current: null };\n\nconst useStyles = makeStyles(theme => ({\n  icon: {\n    color: theme.palette.text.secondary,\n    marginRight: theme.spacing(2),\n  },\n}));\n\nexport default function GoogleMaps() {\n  const classes = useStyles();\n  const [inputValue, setInputValue] = React.useState('');\n  const [options, setOptions] = React.useState([]);\n  const loaded = React.useRef(false);\n\n  if (typeof window !== 'undefined' && !loaded.current) {\n    if (!document.querySelector('#google-maps')) {\n      loadScript(\n        'https://maps.googleapis.com/maps/api/js?key=AIzaSyBwRp1e12ec1vOTtGiA4fcCt2sCUS78UYc&libraries=places',\n        document.querySelector('head'),\n        'google-maps',\n      );\n    }\n\n    loaded.current = true;\n  }\n\n  const handleChange = event => {\n      \n    setInputValue(event.target.value);\n  }\n\n  const fetch = React.useMemo(\n    () =>\n      throttle((input, callback) => {\n        autocompleteService.current.getPlacePredictions(input, callback);\n      }, 200),\n    [],\n  );\n\n  React.useEffect(() => {\n    let active = true;\n    console.log\n    if (!autocompleteService.current && window.google) {\n      autocompleteService.current = new window.google.maps.places.AutocompleteService();\n    }\n    if (!autocompleteService.current) {\n      return undefined;\n    }\n\n    if (inputValue === '') {\n      setOptions([]);\n      return undefined;\n    }\n\n    fetch({ input: inputValue }, results => {\n      if (active) {\n        setOptions(results || []);\n      }\n    });\n\n    return () => {\n      active = false;\n    };\n  }, [inputValue, fetch]);\n\n  return (\n    <Autocomplete\n      id=\"google-map-demo\"\n      style={{ width: 300 }}\n      getOptionLabel={option => (typeof option === 'string' ? option : option.description)}\n      filterOptions={x => x}\n      options={options}\n      autoComplete\n      includeInputInList\n      freeSolo\n      disableOpenOnFocus\n      renderInput={params => (\n        <TextField\n          {...params}\n          label=\"Add a location\"\n          variant=\"outlined\"\n          fullWidth\n          onChange={handleChange}\n        />\n      )}\n      renderOption={option => {\n        const matches = option.structured_formatting.main_text_matched_substrings;\n        const parts = parse(\n          option.structured_formatting.main_text,\n          matches.map(match => [match.offset, match.offset + match.length]),\n        );\n\n        return (\n          <Grid container alignItems=\"center\">\n            <Grid item>\n              <LocationOnIcon className={classes.icon} />\n            </Grid>\n            <Grid item xs>\n              {parts.map((part, index) => (\n                <span key={index} style={{ fontWeight: part.highlight ? 700 : 400 }}>\n                  {part.text}\n                </span>\n              ))}\n\n              <Typography variant=\"body2\" color=\"textSecondary\">\n                {option.structured_formatting.secondary_text}\n              </Typography>\n            </Grid>\n          </Grid>\n        );\n      }}\n    />\n  );\n}\n"]},"metadata":{},"sourceType":"module"}